# generated by datamodel-codegen:
#   filename:  data.json
#   timestamp: 2021-01-27T04:42:01+00:00

from __future__ import annotations

from typing import Any, List, Optional

from pydantic import BaseModel


class StreamModel(BaseModel):
    id: Optional[str] = None
    type: Optional[str] = None
    video_codec: Optional[str] = None
    video_codec_level: Optional[str] = None
    video_bitrate: Optional[str] = None
    video_bit_depth: Optional[str] = None
    video_chroma_subsampling: Optional[str] = None
    video_color_primaries: Optional[str] = None
    video_color_range: Optional[str] = None
    video_color_space: Optional[str] = None
    video_color_trc: Optional[str] = None
    video_dynamic_range: Optional[str] = None
    video_dovi_bl_present: Optional[int] = None
    video_dovi_el_present: Optional[int] = None
    video_dovi_level: Optional[int] = None
    video_dovi_present: Optional[int] = None
    video_dovi_profile: Optional[int] = None
    video_dovi_rpu_present: Optional[int] = None
    video_dovi_version: Optional[float] = None
    video_frame_rate: Optional[str] = None
    video_ref_frames: Optional[str] = None
    video_height: Optional[str] = None
    video_width: Optional[str] = None
    video_language: Optional[str] = None
    video_language_code: Optional[str] = None
    video_profile: Optional[str] = None
    video_scan_type: Optional[str] = None
    selected: Optional[int] = None
    audio_codec: Optional[str] = None
    audio_bitrate: Optional[str] = None
    audio_bitrate_mode: Optional[str] = None
    audio_channels: Optional[str] = None
    audio_channel_layout: Optional[str] = None
    audio_sample_rate: Optional[str] = None
    audio_language: Optional[str] = None
    audio_language_code: Optional[str] = None
    audio_profile: Optional[str] = None


class PartModel(BaseModel):
    id: Optional[str] = None
    file: Optional[str] = None
    file_size: Optional[str] = None
    indexes: Optional[int] = None
    streams: Optional[List[StreamModel]] = None
    selected: Optional[int] = None


class MediaInfoItemModel(BaseModel):
    id: Optional[str] = None
    container: Optional[str] = None
    bitrate: Optional[str] = None
    height: Optional[str] = None
    width: Optional[str] = None
    aspect_ratio: Optional[str] = None
    video_codec: Optional[str] = None
    video_resolution: Optional[str] = None
    video_full_resolution: Optional[str] = None
    video_framerate: Optional[str] = None
    video_profile: Optional[str] = None
    audio_codec: Optional[str] = None
    audio_channels: Optional[str] = None
    audio_channel_layout: Optional[str] = None
    audio_profile: Optional[str] = None
    optimized_version: Optional[int] = None
    channel_call_sign: Optional[str] = None
    channel_id: Optional[str] = None
    channel_identifier: Optional[str] = None
    channel_title: Optional[str] = None
    channel_thumb: Optional[str] = None
    channel_vcn: Optional[str] = None
    parts: Optional[List[PartModel]] = None


class MarkerModel(BaseModel):
    id: Optional[int] = None
    type: Optional[str] = None
    start_time_offset: Optional[int] = None
    end_time_offset: Optional[int] = None
    first: Optional[bool] = None
    final: Optional[bool] = None


class MetadataModel(BaseModel):
    media_type: Optional[str] = None
    section_id: Optional[str] = None
    library_name: Optional[str] = None
    rating_key: Optional[str] = None
    parent_rating_key: Optional[str] = None
    grandparent_rating_key: Optional[str] = None
    title: Optional[str] = None
    parent_title: Optional[str] = None
    grandparent_title: Optional[str] = None
    original_title: Optional[str] = None
    sort_title: Optional[str] = None
    edition_title: Optional[str] = None
    media_index: Optional[str] = None
    parent_media_index: Optional[str] = None
    studio: Optional[str] = None
    content_rating: Optional[str] = None
    summary: Optional[str] = None
    tagline: Optional[str] = None
    rating: Optional[str] = None
    rating_image: Optional[str] = None
    audience_rating: Optional[str] = None
    audience_rating_image: Optional[str] = None
    user_rating: Optional[str] = None
    duration: Optional[str] = None
    year: Optional[str] = None
    parent_year: Optional[str] = None
    grandparent_year: Optional[str] = None
    thumb: Optional[str] = None
    parent_thumb: Optional[str] = None
    grandparent_thumb: Optional[str] = None
    art: Optional[str] = None
    banner: Optional[str] = None
    originally_available_at: Optional[str] = None
    added_at: Optional[str] = None
    updated_at: Optional[str] = None
    last_viewed_at: Optional[str] = None
    guid: Optional[str] = None
    parent_guid: Optional[str] = None
    parent_guids: Optional[List[str]] = None
    grandparent_guid: Optional[str] = None
    grandparent_guids: Optional[List[str]] = None
    directors: Optional[List[str]] = None
    writers: Optional[List[str]] = None
    actors: Optional[List[str]] = None
    genres: Optional[List[str]] = None
    labels: Optional[List] = None
    collections: Optional[List] = None
    guids: Optional[List[str]] = None
    full_title: Optional[str] = None
    children_count: Optional[int] = None
    live: Optional[int] = None
    media_info: Optional[List[MediaInfoItemModel]] = None
    edition_title: Optional[str] = None
    markers: Optional[MarkerModel] = None
    slug: Optional[str] = None
    parent_slug: Optional[str] = None
    grandparent_slug: Optional[str] = None

    @property
    def is_movie(self) -> bool:
        return self.media_type == "movie"

    @property
    def is_show(self) -> bool:
        return self.media_type == "show"

    @property
    def is_season(self) -> bool:
        return self.media_type == "season"

    @property
    def is_episode(self) -> bool:
        return self.media_type == "episode"

    @property
    def is_artist(self) -> bool:
        return self.media_type == "artist"

    @property
    def is_album(self) -> bool:
        return self.media_type == "album"

    @property
    def is_track(self) -> bool:
        return self.media_type == "track"

    @property
    def is_clip(self) -> bool:
        return self.media_type == "clip"

    @property
    def _plex_watch_url_slug(self) -> str:
        if any([self.is_movie, self.is_show, self.is_artist, self.is_clip]):
            return self.slug
        elif any([self.is_season, self.is_album]):
            return self.parent_slug
        elif any([self.is_episode, self.is_track]):
            return self.grandparent_slug
        return ""

    @property
    def _plex_watch_url_type(self) -> str:
        if self.is_movie:
            return "movie"
        elif any([self.is_show, self.is_season, self.is_episode]):
            return "show"
        else:
            return ""

    @property
    def plex_watch_url(self) -> str:
        _prefix = self._plex_watch_url_type
        _slug = self._plex_watch_url_slug
        if not _prefix or not _slug:
            return ""
        return f"https://watch.plex.tv/{_prefix}/{_slug}"
